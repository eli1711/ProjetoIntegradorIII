(function(){
/* Obfuscated auth - base64 wrapper */
var _0x1 = "CmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBmdW5jdGlvbiAoKSB7CiAgICBjb25zdCBsb2dpbkZvcm0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbG9naW5Gb3JtJyk7CiAgICBjb25zdCBsb2dpbkFsZXJ0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2xvZ2luQWxlcnQnKTsKCiAgICAvLyBWZXJpZmljYXIgc2UgasOhIGV4aXN0ZSB1bSB0b2tlbiBkZSBhdXRlbnRpY2HDp8OjbwogICAgaWYgKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdhY2Nlc3NfdG9rZW4nKSkgewogICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gJ3ByaW5jaXBhbC5odG1sJzsKICAgICAgICByZXR1cm47CiAgICB9CgogICAgaWYgKCFsb2dpbkZvcm0gfHwgIWxvZ2luQWxlcnQpIHsKICAgICAgICBjb25zb2xlLmVycm9yKCJGb3JtdWzDoXJpbyBvdSBhbGVydGEgZGUgbG9naW4gbsOjbyBlbmNvbnRyYWRvIG5vIERPTS4iKTsKICAgICAgICByZXR1cm47CiAgICB9CgogICAgbG9naW5Gb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIGZ1bmN0aW9uIChldmVudCkgewogICAgICAgIGhhbmRsZUxvZ2luKGV2ZW50LCBsb2dpbkFsZXJ0KTsKICAgIH0pOwoKICAgIC8vIEluaWNpYWxpemFyIGZ1bmNpb25hbGlkYWRlIGRlIHJlY3VwZXJhw6fDo28gZGUgc2VuaGEKICAgIGluaXRQYXNzd29yZFJlY292ZXJ5KCk7CgogICAgLy8gVGVzdGFyIGNvbmV4w6NvIGNvbSBvIGJhY2tlbmQKICAgIHRlc3RCYWNrZW5kQ29ubmVjdGlvbigpOwp9KTsKCi8vIEZ1bsOnw6NvIHBhcmEgaW5pY2lhbGl6YXIgYSByZWN1cGVyYcOnw6NvIGRlIHNlbmhhCmZ1bmN0aW9uIGluaXRQYXNzd29yZFJlY292ZXJ5KCkgewogICAgLy8gTW9kYWwgZGUgcmVjdXBlcmHDp8OjbyBkZSBzZW5oYQogICAgY29uc3QgbW9kYWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiZm9yZ290UGFzc3dvcmRNb2RhbCIpOwogICAgY29uc3QgYnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigiLmZvcmdvdC1wYXNzd29yZCIpOwogICAgY29uc3Qgc3BhbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIi5jbG9zZSIpOwogICAgY29uc3QgcmVjb3ZlcnlGb3JtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImZvcmdvdFBhc3N3b3JkRm9ybSIpOwoKICAgIC8vIFZlcmlmaWNhciBzZSBvcyBlbGVtZW50b3MgZXhpc3RlbSBhbnRlcyBkZSBhZGljaW9uYXIgZXZlbnQgbGlzdGVuZXJzCiAgICBpZiAoIW1vZGFsIHx8ICFidG4gfHwgIXNwYW4gfHwgIXJlY292ZXJ5Rm9ybSkgewogICAgICAgIGNvbnNvbGUud2FybigiRWxlbWVudG9zIGRlIHJlY3VwZXJhw6fDo28gZGUgc2VuaGEgbsOjbyBlbmNvbnRyYWRvcyBubyBET00uIik7CiAgICAgICAgcmV0dXJuOwogICAgfQoKICAgIGJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKGUpIHsKICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgbW9kYWwuc3R5bGUuZGlzcGxheSA9ICJibG9jayI7CiAgICB9KTsKCiAgICBzcGFuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oKSB7CiAgICAgICAgbW9kYWwuc3R5bGUuZGlzcGxheSA9ICJub25lIjsKICAgIH0pOwoKICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKGV2ZW50KSB7CiAgICAgICAgaWYgKGV2ZW50LnRhcmdldCA9PT0gbW9kYWwpIHsKICAgICAgICAgICAgbW9kYWwuc3R5bGUuZGlzcGxheSA9ICJub25lIjsKICAgICAgICB9CiAgICB9KTsKCiAgICAvLyBGb3JtdWzDoXJpbyBkZSByZWN1cGVyYcOnw6NvCiAgICByZWNvdmVyeUZvcm0uYWRkRXZlbnRMaXN0ZW5lcigic3VibWl0IiwgZnVuY3Rpb24oZSkgewogICAgICAgIGUucHJldmVudERlZmF1bHQoKTsKCiAgICAgICAgY29uc3QgZW1haWxJbnB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJyZWNvdmVyeUVtYWlsIik7CiAgICAgICAgY29uc3QgbWVzc2FnZUVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgicmVjb3ZlcnlNZXNzYWdlIik7CgogICAgICAgIGlmICghZW1haWxJbnB1dCB8fCAhbWVzc2FnZUVsZW1lbnQpIHsKICAgICAgICAgICAgY29uc29sZS5lcnJvcigiRWxlbWVudG9zIGRlIHJlY3VwZXJhw6fDo28gbsOjbyBlbmNvbnRyYWRvcyIpOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICBjb25zdCBlbWFpbCA9IGVtYWlsSW5wdXQudmFsdWUudHJpbSgpOwoKICAgICAgICBpZiAoIWVtYWlsKSB7CiAgICAgICAgICAgIG1lc3NhZ2VFbGVtZW50LmlubmVySFRNTCA9ICc8ZGl2IGNsYXNzPSJlcnJvciI+UG9yIGZhdm9yLCBpbmZvcm1lIG8gZS1tYWlsPC9kaXY+JzsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgY29uc29sZS5sb2coJ/Cfk6QgRW52aWFuZG8gcmVxdWlzacOnw6NvIHBhcmEgcmVjdXBlcmHDp8OjbyBkZSBzZW5oYS4uLicpOwogICAgICAgIGNvbnNvbGUubG9nKCfwn5OnIEVtYWlsOicsIGVtYWlsKTsKCiAgICAgICAgLy8gUHJpbWVpcm8gdGVzdGUgY29tIGEgcm90YSBzaW1wbGlmaWNhZGEKICAgICAgICB0ZXN0UmVjb3ZlcnlSb3V0ZSgpLnRoZW4oKCkgPT4gewogICAgICAgICAgICAvLyBTZSBhIHJvdGEgZGUgdGVzdGUgZnVuY2lvbmFyLCBlbnTDo28gZW52aWEgcGFyYSBhIHJvdGEgcmVhbAogICAgICAgICAgICBzZW5kUmVjb3ZlcnlSZXF1ZXN0KGVtYWlsLCBtb2RhbCwgbWVzc2FnZUVsZW1lbnQsIHJlY292ZXJ5Rm9ybSk7CiAgICAgICAgfSkuY2F0Y2goZXJyb3IgPT4gewogICAgICAgICAgICBjb25zb2xlLmVycm9yKCfinYwgUm90YSBkZSB0ZXN0ZSBmYWxob3U6JywgZXJyb3IpOwogICAgICAgICAgICBtZXNzYWdlRWxlbWVudC5pbm5lckhUTUwgPSAnPGRpdiBjbGFzcz0iZXJyb3IiPlNlcnZpZG9yIGluZGlzcG9uw612ZWwuIFRlbnRlIG5vdmFtZW50ZSBtYWlzIHRhcmRlLjwvZGl2Pic7CiAgICAgICAgfSk7CiAgICB9KTsKfQoKLy8gRnVuw6fDo28gcGFyYSB0ZXN0YXIgYSByb3RhIGRlIHJlY3VwZXJhw6fDo28KYXN5bmMgZnVuY3Rpb24gdGVzdFJlY292ZXJ5Um91dGUoKSB7CiAgICB0cnkgewogICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goJ2h0dHA6Ly9sb2NhbGhvc3Q6NTAwMC9hdXRoL3JlY3VwZXJhcl9zZW5oYV90ZXN0JywgewogICAgICAgICAgICBtZXRob2Q6ICdQT1NUJywKICAgICAgICAgICAgaGVhZGVyczogewogICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJywKICAgICAgICAgICAgfSwKICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoeyBlbWFpbDogJ3Rlc3RAZXhhbXBsZS5jb20nIH0pCiAgICAgICAgfSk7CgogICAgICAgIGlmICghcmVzcG9uc2Uub2spIHsKICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFcnJvIG5hIHJvdGEgZGUgdGVzdGU6ICcgKyByZXNwb25zZS5zdGF0dXMpOwogICAgICAgIH0KCiAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTsKICAgICAgICBjb25zb2xlLmxvZygn4pyFIFJvdGEgZGUgdGVzdGUgZnVuY2lvbmFuZG86JywgZGF0YSk7CiAgICAgICAgcmV0dXJuIGRhdGE7CiAgICB9IGNhdGNoIChlcnJvcikgewogICAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBFcnJvIG5hIHJvdGEgZGUgdGVzdGU6JywgZXJyb3IpOwogICAgICAgIHRocm93IGVycm9yOwogICAgfQp9CgovLyBGdW7Dp8OjbyBwYXJhIGVudmlhciBhIHJlcXVpc2nDp8OjbyByZWFsCmFzeW5jIGZ1bmN0aW9uIHNlbmRSZWNvdmVyeVJlcXVlc3QoZW1haWwsIG1vZGFsLCBtZXNzYWdlRWxlbWVudCwgcmVjb3ZlcnlGb3JtKSB7CiAgICB0cnkgewogICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goJ2h0dHA6Ly9sb2NhbGhvc3Q6NTAwMC9hdXRoL3JlY3VwZXJhcl9zZW5oYScsIHsKICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsCiAgICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsgZW1haWw6IGVtYWlsIH0pCiAgICAgICAgfSk7CgogICAgICAgIGNvbnNvbGUubG9nKCfwn5OlIFJlc3Bvc3RhIHJlY2ViaWRhOicsIHJlc3BvbnNlLnN0YXR1cywgcmVzcG9uc2Uuc3RhdHVzVGV4dCk7CgogICAgICAgIGlmICghcmVzcG9uc2Uub2spIHsKICAgICAgICAgICAgY29uc3QgZXJyb3JUZXh0ID0gYXdhaXQgcmVzcG9uc2UudGV4dCgpOwogICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEVycm8gJHtyZXNwb25zZS5zdGF0dXN9OiAke2Vycm9yVGV4dH1gKTsKICAgICAgICB9CgogICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7CiAgICAgICAgY29uc29sZS5sb2coJ/Cfk4ogRGFkb3MgcmVjZWJpZG9zOicsIGRhdGEpOwoKICAgICAgICBpZiAoZGF0YS5zdWNjZXNzKSB7CiAgICAgICAgICAgIC8vIEFMRVJUQSBERSBFLU1BSUwgRU5DT05UUkFETyBFIEVOVklBRE8KICAgICAgICAgICAgbWVzc2FnZUVsZW1lbnQuaW5uZXJIVE1MID0gYDxkaXYgY2xhc3M9InN1Y2Nlc3MiPuKchSAke2RhdGEubWVzc2FnZSB8fCAnRS1tYWlsIGVuY29udHJhZG8hIExpbmsgZGUgcmVjdXBlcmHDp8OjbyBlbnZpYWRvIGNvbSBzdWNlc3NvLid9PC9kaXY+YDsKICAgICAgICAgICAgcmVjb3ZlcnlGb3JtLnJlc2V0KCk7CgogICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHsKICAgICAgICAgICAgICAgIG1vZGFsLnN0eWxlLmRpc3BsYXkgPSAibm9uZSI7CiAgICAgICAgICAgICAgICBtZXNzYWdlRWxlbWVudC5pbm5lckhUTUwgPSAnJzsKICAgICAgICAgICAgfSwgMzAwMCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgLy8gQUxFUlRBIERFIEUtTUFJTCBOw4NPIEVOQ09OVFJBRE8KICAgICAgICAgICAgbWVzc2FnZUVsZW1lbnQuaW5uZXJIVE1MID0gYDxkaXYgY2xhc3M9ImVycm9yIj7inYwgJHtkYXRhLm1lc3NhZ2UgfHwgJ0VzdGUgZS1tYWlsIG7Do28gZXN0w6EgY2FkYXN0cmFkbyBlbSBub3NzbyBzaXN0ZW1hLid9PC9kaXY+YDsKICAgICAgICB9CiAgICB9IGNhdGNoIChlcnJvcikgewogICAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBFcnJvIGNvbXBsZXRvOicsIGVycm9yKTsKICAgICAgICAvLyBBTEVSVEEgREUgRVJSTyBOTyBQUk9DRVNTQU1FTlRPCiAgICAgICAgbWVzc2FnZUVsZW1lbnQuaW5uZXJIVE1MID0gJzxkaXYgY2xhc3M9ImVycm9yIj7inYwgRXJybyBhbyBwcm9jZXNzYXIgc29saWNpdGHDp8Ojby4gVmVyaWZpcXVlIG8gY29uc29sZSBwYXJhIGRldGFsaGVzLjwvZGl2Pic7CiAgICB9Cn0KCmFzeW5jIGZ1bmN0aW9uIGhhbmRsZUxvZ2luKGV2ZW50LCBsb2dpbkFsZXJ0KSB7CiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOwoKICAgIGNvbnN0IGVtYWlsSW5wdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZW1haWwnKTsKICAgIGNvbnN0IHNlbmhhSW5wdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncGFzc3dvcmQnKTsKCiAgICBpZiAoIWVtYWlsSW5wdXQgfHwgIXNlbmhhSW5wdXQpIHsKICAgICAgICBleGliaXJNZW5zYWdlbShsb2dpbkFsZXJ0LCAiRXJybzogQ2FtcG9zIGRlIGUtbWFpbCBvdSBzZW5oYSBuw6NvIGVuY29udHJhZG9zLiIsICJlcnJvciIpOwogICAgICAgIHJldHVybjsKICAgIH0KCgogICAgY29uc3QgbG9naW5EYXRhID0gewogICAgICAgIGVtYWlsOiBlbWFpbElucHV0LnZhbHVlLnRyaW0oKSwKICAgICAgICBzZW5oYTogc2VuaGFJbnB1dC52YWx1ZS50cmltKCkKICAgIH07CgogICAgaWYgKCFsb2dpbkRhdGEuZW1haWwgfHwgIWxvZ2luRGF0YS5zZW5oYSkgewogICAgICAgIGV4aWJpck1lbnNhZ2VtKGxvZ2luQWxlcnQsICJQb3IgZmF2b3IsIHByZWVuY2hhIG8gZS1tYWlsIGUgYSBzZW5oYS4iLCAiZXJyb3IiKTsKICAgICAgICByZXR1cm47CiAgICB9CgogICAgdHJ5IHsKICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKCdodHRwOi8vbG9jYWxob3N0OjUwMDAvYXV0aC9sb2dpbicsIHsKICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsCiAgICAgICAgICAgIGhlYWRlcnM6IHsgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyB9LAogICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShsb2dpbkRhdGEpCiAgICAgICAgfSk7CgogICAgICAgIGlmICghcmVzcG9uc2Uub2spIHsKICAgICAgICAgICAgY29uc3QgZXJyb3JUZXh0ID0gYXdhaXQgcmVzcG9uc2UudGV4dCgpOwogICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEVycm8gSFRUUCAke3Jlc3BvbnNlLnN0YXR1c306ICR7ZXJyb3JUZXh0fWApOwogICAgICAgIH0KCiAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTsKCiAgICAgICAgaWYgKGRhdGEuYWNjZXNzX3Rva2VuKSB7CiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdhY2Nlc3NfdG9rZW4nLCBkYXRhLmFjY2Vzc190b2tlbik7CiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCd1c2VyX2lkJywgZGF0YS51c2VyX2lkKTsKICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2NhcmdvJywgZGF0YS5jYXJnbyk7CgogICAgICAgICAgICBleGliaXJNZW5zYWdlbShsb2dpbkFsZXJ0LCAi4pyFIExvZ2luIGJlbS1zdWNlZGlkbyEgUmVkaXJlY2lvbmFuZG8uLi4iLCAic3VjY2VzcyIpOwogICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHsKICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gJ3ByaW5jaXBhbC5odG1sJzsKICAgICAgICAgICAgfSwgMTUwMCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgZXhpYmlyTWVuc2FnZW0obG9naW5BbGVydCwgZGF0YS5lcnJvIHx8IGRhdGEubWVzc2FnZSB8fCAi4p2MIEUtbWFpbCBvdSBzZW5oYSBpbnbDoWxpZG9zLiIsICJlcnJvciIpOwogICAgICAgIH0KICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgIGNvbnNvbGUuZXJyb3IoIkVycm8gbmEgcmVxdWlzacOnw6NvIGRlIGxvZ2luOiIsIGVycik7CiAgICAgICAgZXhpYmlyTWVuc2FnZW0obG9naW5BbGVydCwgIuKdjCBFcnJvIGluZXNwZXJhZG8gYW8gdGVudGFyIGZhemVyIGxvZ2luLiIsICJlcnJvciIpOwogICAgfQp9CgovLyBGdW7Dp8OjbyBwYXJhIGV4aWJpciBtZW5zYWdlbnMgY29tIGVzdGlsbwpmdW5jdGlvbiBleGliaXJNZW5zYWdlbShlbGVtZW50bywgbWVuc2FnZW0sIHRpcG8pIHsKICAgIGlmICghZWxlbWVudG8pIHsKICAgICAgICBjb25zb2xlLmVycm9yKCJFbGVtZW50byBwYXJhIGV4aWJpciBtZW5zYWdlbSBuw6NvIGVuY29udHJhZG8iKTsKICAgICAgICByZXR1cm47CiAgICB9CgogICAgZWxlbWVudG8uaW5uZXJIVE1MID0gJyc7CiAgICBjb25zdCBtZXNzYWdlRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CiAgICBtZXNzYWdlRGl2LnRleHRDb250ZW50ID0gbWVuc2FnZW07CiAgICBtZXNzYWdlRGl2LmNsYXNzTmFtZSA9IHRpcG87CiAgICBlbGVtZW50by5hcHBlbmRDaGlsZChtZXNzYWdlRGl2KTsKICAgIGVsZW1lbnRvLnN0eWxlLmRpc3BsYXkgPSAiYmxvY2siOwoKICAgIGlmICh0aXBvID09PSAnZXJyb3InKSB7CiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7CiAgICAgICAgICAgIGVsZW1lbnRvLnN0eWxlLmRpc3BsYXkgPSAibm9uZSI7CiAgICAgICAgICAgIGVsZW1lbnRvLmlubmVySFRNTCA9ICcnOwogICAgICAgIH0sIDUwMDApOwogICAgfQp9CgovLyBGdW7Dp8OjbyBwYXJhIHRlc3RhciBhIGNvbmV4w6NvIGNvbSBvIGJhY2tlbmQKYXN5bmMgZnVuY3Rpb24gdGVzdEJhY2tlbmRDb25uZWN0aW9uKCkgewogICAgdHJ5IHsKICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKCdodHRwOi8vbG9jYWxob3N0OjUwMDAvYXV0aC90ZXN0Jyk7CiAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTsKICAgICAgICBjb25zb2xlLmxvZygn4pyFIFRlc3RlIGRlIGNvbmV4w6NvIGNvbSBiYWNrZW5kOicsIGRhdGEpOwogICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgICBjb25zb2xlLmVycm9yKCfinYwgRXJybyBuYSBjb25leMOjbyBjb20gYmFja2VuZDonLCBlcnJvcik7CiAgICB9Cn0K";
try{
  var _0x2 = atob(_0x1);
  var _0xfn = new Function(_0x2);
  _0xfn();
}catch(e){
  console.error('Erro ao decodificar/executar auth obfuscado', e);
}
})();
